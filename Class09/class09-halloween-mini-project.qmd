---
title: "class09-halloween-mini-project"
author: "Aaron (PID A17544470)"
date: 2025-02-04
format: pdf
toc: true
---


Today we will examine data from 538 on Halloween candy. In particular we will use ggplot, dplyr, and PCA to make sense of this multivariate dataset. 


## Importing Candy Data

```{r}
candy_file <- "candy-data.csv"

candy = read.csv(candy_file, row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

```{r}
dim(candy)
```
There are 12 different candy types

> Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy$fruity)
```
There are 38 fruity candy types in this datasest


## What is your favorite candy?
> Q3. What is your favorite candy in the dataset and what is it’s winpercent value?

Air Heads have a 52.34146% winpercent value.
```{r}
candy["Air Heads", ]$winpercent
```

> Q4. What is the winpercent value for “Kit Kat”?

```{r}
candy["Kit Kat", "winpercent"]
```

> Q5. What is the winpercent value for “Tootsie Roll Snack Bars”?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent
```

> How many chocolate candy are there in this dataset?

```{r}
sum(candy$chocolate)

```
There are 37 chocolate candies in this dataset.



### Skim function
```{r}
## install.packages("skimr") Install "skimr" if needed
library("skimr")
skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

The `winpercent` variable/column seems to be on a different scale from the majority of the other variables/columns in this dataset (0-100% rather than 0-1). We will need to scale this dataset before analysis like PCA.

> Q7. What do you think a zero and one represent for the candy$chocolate column?

A zero represents not having being a chcolate candy and a one represents having chocolate.
```{r}
skim(candy$chocolate)
```

> Q8. Plot a histogram of winpercent values

```{r}
## install.packages("ggplot2")
library(ggplot2)

ggplot(candy) +
  aes(x = winpercent) +
  geom_histogram(bins = 10, fill = "lightblue")
```


> Q9. Is the distribution of winpercent values symmetrical?

No

> Q10. Is the center of the distribution above or below 50%?

The median is below 50%
```{r}
summary(candy$winpercent)
```

> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

- step 1: find all "chocolate candy"
- step 2: find their "winpercent" values
- step 3: summarize these values 

- step 4: find all "fruity candy"
- step 5: find their winpercent values
- step 6: summarize these values

- step 7: compare these two summary values


1. Find all chocolate candy

```{r}
choc.inds <- candy$chocolate == 1
```

2. Find their winpercent values

```{r}
choc.win <- candy[choc.inds,]$winpercent
```

3. Summarize these values

```{r}
choc.mean <- mean(choc.win)
```

Do the same for fruity candy.

```{r}
fruit.inds <- candy$fruity == 1
fruit.win <- candy[fruit.inds,]$winpercent
fruit.mean <- mean(fruit.win)
```

Clearly chocolate has a higher mean winpercent than fruity candy

```{r}
choc.mean
fruit.mean
```


> Q12. Is this difference statistically significant?

This difference is statistically significant.
```{r}
t.test(choc.win, fruit.win)
```


## Overall Candy Rankings

> Q13. What are the five least liked candy types in this set?

The five least liked
```{r}
# Not too useful - it just sorts the values
sort( candy$winpercent )
```

```{r}
x <- c(10, 1, 100)
order(x)
x[ order(x)]
```
The `order()` function tells us how to arrange the elements of the input to make them sorted - i.e. how to order them.

We can determine the order of winpercent to make them sorted and use that to arrange the whole dataset

```{r}
ord.inds <- order(candy$winpercent)
head( candy[ord.inds, ] )
```


> Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
ord.inds <- order(candy$winpercent, decreasing = T)
head( candy[ord.inds, ] )
```


> Q15. Make a first barplot of candy ranking based on winpercent values.


```{r}
ggplot(candy) +
  aes(winpercent, rownames(candy)) +
  geom_col()
```

> Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?


```{r}
ggplot(candy) +
  aes(winpercent, reorder( rownames(candy),winpercent)) +
  geom_col()
```

We need to make our own separate color vector where we can spell out exactly what candy is colored a particular color

```{r}
mycols <- rep("gray", nrow(candy))
mycols[candy$chocolate == 1] <- "chocolate"
mycols[candy$fruity == 1] <- "pink"
mycols[candy$bar == 1] <- "brown"
```


```{r}
ggplot(candy) +
  aes(winpercent, reorder( rownames(candy),winpercent)) +
  geom_col(fill = mycols)
```

> Q17. What is the worst ranked chocolate candy?

The worst ranekd chocolate candy is Sixlets

> Q18. What is the best ranked fruity candy?

The best ranked fruity candy is Starburst


## Taking a look at pricepercent

Make a plot of winpercent(x-axis) vs pricepercent(y-axis)

```{r}
ggplot(candy) +
  aes(winpercent, pricepercent, label = rownames(candy)) +
  geom_point(col=mycols) +
  geom_text()
```

To avoid overplotting of the text we can use the add on package **ggrepel**.

```{r}
library(ggrepel)

ggplot(candy) +
  aes(winpercent, pricepercent, label = rownames(candy)) +
  geom_point(col=mycols) +
  geom_text_repel(max.overlaps = 6) +
  theme_bw()
```

> Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reese's miniatures, a chocolate, is the highest winpercent for some of the lowest pricepercents.
Starburst, Sour Patch Kids and Skittles Original, all fruit, all are similarly lower in pricepercents but a bit less in winpercent.


> Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

The top 5 most expensive candies are Nik L Nip, Ring Pop, Nestle Smarties, Hersheys Milk Chocolate and Hershey's Krackel. Nik L Nip is the least popular.

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```

## Exploring the correlation structure

Now that we have explored the dataset a little, we will see how the variables interact with one another.

First we will use the correlation and view the resutls with the **corrplot** package to plot a correlation matrix.


```{r}
cij <- cor(candy)
cij
```


```{r}
library(corrplot)

corrplot(cij)
```

> Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

Examining this plot, fruity and chocolate are anti-correlated values

> Q23. Similarly, what two variables are most positively correlated?

Chocolate and bar are most positively correlated.


## Principal Component Analysis


Let’s apply PCA using the `prcomp()` function to our candy dataset remembering to set the **scale=TRUE** argument.
```{r}
pca <- prcomp(candy, scale = T)
summary(pca)
```

```{r}
attributes(pca)
```

Let's plot our main results as our PCA "score plot"

```{r}
ggplot(pca$x) +
  aes(PC1, PC2, label = rownames(pca$x)) +
  geom_point(col = mycols) +
  geom_text_repel(col = mycols)
```


Finally let's look at the original variables contribute to the PCs, start with PC1

```{r}
ggplot(pca$rotation) +
  aes(PC1, reorder(rownames(pca$rotation), PC1)) +
  geom_col()
```

> Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, pluribus and hard are picked up strongly by PC1 in the positive direction. This makes sense as these are common traits of each other such as Warheads or Smarties or Starburst.

### Plotly

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=mycols)

p
```

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=mycols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```


```{r}
## install.packages("plotly")
library(plotly)
ggplotly(p)
```







