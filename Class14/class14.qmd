---
title: "Class14: Pathway Analysis from RNA-Seq Results"
author: "Aaron (PID A17544470)"
format: pdf
toc: true
---


## Background

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.

## Data Import

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names = 1 )
colData <- read.csv("GSE37704_metadata.csv")

```

## Inspect and tidy data

Does the `counts` columns match the `colData` rows?
```{r}
colData$id
```

```{r}
colnames(counts)
```

```{r}
head(counts)
```

>Q. Complete the code below to remove the troublesome first column from countData

The fix here looks to be removing the first "length" column from counts

```{r}
countData <- counts[,-1]
head(countData)
```



Check for matching contData and colData
```{r}
colnames(countData) == colData$id
```

> Q1. How many genes are there?

```{r}
nrow(countData)
```

> Q2. Filter to remove zero count genes (rows where there are zero counts in all columns). How many genes are left?

```{r}
to.keep.inds <- rowSums(countData) > 0

head(to.keep.inds)
```

```{r}
new.counts <- countData[to.keep.inds,]
```

```{r}
nrow(new.counts)
```


```{r}
head(countData)
```



## Setup for DESeq2
```{r}
library(DESeq2)
```


Setup input for DESeq2
```{r}
dds = DESeqDataSetFromMatrix(countData= new.counts,
                             colData= colData,
                             design= ~condition)

```


## Run DESeq
```{r}
dds <- DESeq(dds)
res <- results(dds)

```

>Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
head(res)
summary(res)
```


## Volcano plot of results

```{r}
library(ggplot2)
```

```{r}
resplot <-ggplot(res) +
    aes(log2FoldChange, -log(padj)) +
    geom_point() +
    geom_vline(xintercept = c(-2,2), col = "pink") +
    geom_hline(yintercept = 0.05, col = "pink")

resplot
  
```


>Q. Improve this plot by completing the below code, which adds color and axis labels

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"


plot( res$log2FoldChange, -log(res$padj), col= mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```




## Gene annotation

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```


>Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

Add Gene SYMBOL, ENTREZID, and GENENAME

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys= row.names(res), 
                    keytype="ENSEMBL",
                    column= "SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

```

>Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file ="deseq_results.csv")
```

## Pathway Analysis

```{r}
library(gage)
library(gageData)
library(pathview)
```

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
```

Input your geneIDs
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Looking up the KEGG genesets
```{r}
data(kegg.sets.hs)
```

Run pathway analysis with KEGG

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```
Cell cycle figure
```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```


![](hsa04110.pathview.png)

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```


>Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
## Focus on top 5 downlregulated pathways
keggrespathways <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids1 = substr(keggrespathways, start=1, stop=8)
keggresids1
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids1, species="hsa")
```

![](hsa03440.pathview.png)
![](hsa03013.pathview.png)
![](hsa05130.pathview.png)
![](hsa03030.pathview.png)
![](hsa04110.pathview.png)


## Gene Ontology


Run pathway analysis with GO

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
## head(gobpres)
```

## Section 4. Reactome Analysis

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

>Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The most significant "Entities p-value" is "cell cycle". The most significant pathways listed do not match much to the previous KEGG results. This could potentially be from the torturing of data.

